%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1373.000000 897.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.4 (Build 19E287) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1373 897
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1373 897
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /T put
dup 34 /one put
dup 35 /two put
dup 36 /three put
dup 37 /L put
dup 38 /zero put
dup 39 /seven put
dup 40 /five put
dup 41 /four put
dup 42 /six put
dup 43 /nine put
dup 44 /Z put
dup 45 /e put
dup 46 /i put
dup 47 /t put
dup 48 /space put
dup 49 /parenleft put
dup 50 /mu put
dup 51 /s put
dup 52 /parenright put
dup 53 /h put
dup 54 /r put
dup 55 /a put
dup 56 /d put
dup 57 /U put
dup 58 /n put
dup 59 /l put
dup 60 /o put
dup 61 /c put
dup 62 /k put
dup 63 /E put
dup 64 /v put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 34 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/zero 4 def
/one 5 def
/two 6 def
/three 7 def
/four 8 def
/five 9 def
/six 10 def
/seven 11 def
/nine 12 def
/E 13 def
/L 14 def
/T 15 def
/U 16 def
/Z 17 def
/a 18 def
/c 19 def
/d 20 def
/e 21 def
/h 22 def
/i 23 def
/k 24 def
/l 25 def
/n 26 def
/o 27 def
/r 28 def
/s 29 def
/t 30 def
/v 31 def
/mu 32 def
/uni20BE 33 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec



8B36308581EB137DACF9523E381DD1AC7C2C3B7F8CC516ED2236CE84BDE694F8222EAB3FB8BDA6A12A3A6CF074C0C4A47708DB3619F656998F387274CAD2C8C4BD7B5BF68DBF7344C7118EA4E61439C20E3E766945994D2F0CBD2223F87CA74C841A1D6139429F98E7A9F605514F6FDFEC708C1A01356C57AFDBA48F8AB1CE4684C4D93C954411EEA7B59C7A727E516586E494FD5A7F8765338C528DD49CB823789DE36743475AE29148DE3475922ABDECFB7822EC25C0FB40CCE2C1A6C6BC769D52C6B6D39CD04E8015F7467ECC264EE0628245E388399F8C601874D231A76800AF1660904DA231FAA087DC8A9AB39B5186413B715C758D1276A4D8D2F50EA8F2624D2482EBAACC9B97D93D647B9973C3D87882812B73321189E9F80360D5D2F4F1B0DAA4EF2568A42C8E8405C368664124E70E936AA6FA1F79B033395E68F5779E3557A38507E0D30A909521A638C411A2483FC276A26E78A41B9F0CC92D50624AEEF8243CAD92CD6C5FBB2AC594EC621D6F24AAA6E564C80ADB10690D1F60E246A75AE71CE4DE3673F8035746C780F2C5E1843F26409380BF1C5228D13930F0F0CC527681C206669DF6B67EF648BE211F887B9F6D578F7CB5770A4BB22E3820E14D84B28AB2C62629E2F315793E5903F6511E4CEA442CF20DCC5EF8D47270D4ADF4D659A646B2581450E03927ABC8ED745F50D96D1E1394908E407FF42BFBBFF708AEC5B6FD4452554164C0C63CAEEB0730574F3BCBF33642C49FDF8339E27A29A6B76A58A12C9456F7B2AB165E3D7DC119FAEBF2302564EEFE30155E9489A7C3B4AC477BE283C5E836A9A14F6155E2C13AC01E04D8CF2075B4AB790E0A7BEF9BE25FEEA8380C4F2D6D6C85226006289DB20A5D214782764BD76C025D148B06CE70BE7124AF83747769A0BF478D6B77E0997620A146B65FA9D12CD9F57A06CE5B5A7E2EDF2F0F611CE262CE215E88FB8C13848DB8669BD2F970883282CFC7BAB84613009CAA2E77674176279E8B49AA51EA20611D51F819C7E45E5B2384A6B3D7F330C87B0041C9CBBCFA83146B11ABD32D93193B0F5B955DA8021306F918FEB04FD7C97F91261CC3D296443C721200C3E476327919612692D80458E1C239098746E6739409254A9BF2C80AC16269E9B4137A2A7A0B62286AF2C2BDAAC54331644D2FD4BE9AD703428A2FFC0D57121A048314E7B807D653015F25C04884506B768F7AFB8EE1ACB2FE4A6F0B88DCF8A7B5A6549A9278F0752C649644B03F61053CC7D9E4B21EFD08CAF743CC822C05FB0732C8D0DFEFD04BD641987AC5904756369AC5527B494DD907898DA07C06547F90F3082C46178E8B4C81337F90D8CB5B5C6743B53E17017698602E0303DC8835C6F17A6B6C39BCC5AC57D298289A29BEE086A8F5FD992B578C7278069E0584165A86278DDB6A852F3AE59597BD6C1B
CBA169AE3077F08E415EDADC5D22CFF6D46054A34C91053BC93F337154574CA15A07E3B300BF67D156CEB6E32EACB2D8FED77A7E202793A098F2930954213DEBE2317E3E7457067F176962CBFE12C6C113C2506699980628EB3465DC82B987C05A48B770966013C54410ACFD2E6BD05B904981565177E97AE8A2D71D71825E7E3893DF775B859F3AF21087A82FDD49912A3BB3DC17E5D20F67965989319ADC61EE5EBA36FE2FF9C0E17EDDC16D6561F95A714CD6B36691760C5BEB7C4181AFE83543E4CC40F1F8B970DF83069470E500F1C901A7B7911BC57E78CD83B6C287CD39970DEB90402A4743F0B95847202A8EB28F6F6B1FCB80779057130C6E9269E53435131639FF4A0C17547256A31233A096CDDB6C046366C9AA9961C41094FBF6133E76F1584FBF0D2DA6DFECCAA0F00717F6D5822411E194AEBFAD8A34FC3A2C3CDDB4CAC7C11B6C3666354F61CAC0AD10889CDF959BC654F577C8E3ED20489263EF8D0D854DF4C298B3D3777D74CB6ADDDEF011669E91306F013973FE707F4B5DA0639B41BFEEAB342C37AC1B2A25BDC40D6962680A6C18BD3E95765C7E23CA3905D2BE5A8A03359E8336C2D0A78BED8B8237824692E6DFC40908873727C3E92F96E3038459BD750C3E55670686D67DAA1FA91AEC58DAB5EBD0EF35C6306B4DF31EEB670FD9170D029125CF208CBDB09D193D8C17AE6CBA3473BE578E2744002CBF19DCA27FA0D18B564BE53E7112A63B6D77B3EA3061F3C63AEB85E40A5E8A98DA9B8C2DCEF4CC18C1A61C1A995339327E0DF30C7FF2DB270AA8028C962FCA35032521FD31DE10961C3D6ED5797073DDA3063062983F10624DE63895DA7F54841980EF74514C972838E48381EB0704C4426AD477381459A308F53AFB0DAEC19EA47BC9BBA71D5D698769FFDD500364CB0FFB47CEC616FDA0FC5BFB37795F426652A73010291EE8BD51CC7A2EFA13C6D38B106BDCC75B0B36E2CAD1926BA2DDE0E97A739259903D91D125AD20D55490DE243549C69BCF53AB5E246FD815647CE11E0FAE796A9354EF3E31EAE87DA0D9D73B73B8499E7C21A3637E26416644F6C9AAAFD14C6C569539C2F6449D85CADE391DBB807A3F8231227D817CFAE1603B6F8E2CC34FB6061AEAF90E4CFD8EB350BE2E140676124BFD1DCE2D69D7815EB7D2869CBA9902B9DBF6AACD8C28599DC41C372C23D3A0F56FBC05E43CA676FA7B675D576ACA13B0415432A08AA46DDAD59B21A96BDB1F655BFECD774CDEFFA86E2969F637908D892329C4C019562EEEC3FBE354A09FB155CC87A82E819B754DAE1753F5C037B3DBC02D40724DA58B2FBA6D22F517D5ED039CF65A5C6B80FC95C162DC908BAADA7EC676E538408C59A1EFD6C9D300600854312CE3C333B00709D52B7AB79BE6B1C995A087A47DD4DDA6481D8E11C6938CA41F07CD66D1B947EBEC
AD8642B23F9A9EE3E9D7BD11D9914054D12A3420728F34C8E249FF02A16FDBA83F4874DD6F6B8E9345DABC9A14C67FC9223DD6A84718975692807EB48E2AB052D9D0C1A229796639BAD998AA7270E75E7117E10CB530F2AD7D2EE206422806E36FE3942B8D3454524970B11B2764B939ED618163C054ABF19A5AEF1E554BD9BAF98D5990AB0D3C02CAF31625DB05408CE91736741B2AFBBECE288D42CE62C287E129A1DBF57F7F8AC6DBA975FE03EEFE940B018A947B45822E1C97AE65B636CDC52E172722920794F52170056DFA8B3B7D5BE6E50BFFEF4A0899E347F6D31FD5D7D32E1373F1642F971825E7617C81CDCFAD307359A72383DA770F06DCB40958DF4666D0230CB1788449F1BD46953783E90929553511474419F0F37AD4320C45AD416C7AF471F797355361779570DFB6BD7751EEA227078DA0C1C3F2A1AA7C9AFFAF77CA3245DC7820BA3885AF1719EC1477407E7D28A397ED907BAD04414170004266305EC1562639A3CD3C245C78A0D82F889C0989C2A56ABD4F51A7FEF319DF94F7A35454287D035557A70ABEE47DE27B75516FC2F88DB5A5C5B98CCFFB8377D000B95D9F65A1AEF8BF3AE76F62DCE02C3C3F0EF568771105F291470B000C64CA20BCC0B4C5B2CAC0773F638047482D20F3720431716C76D9D4E9DAC456A543920949715A76781F639B6A68D087163FAC013BCAA2C1E6925CEBE10EB2534EB3A5D3C9898C97565513CB129C3281EDA6C25AE09E9D937E78B0162CA6D6A663FCA2A2D777ADC0DAA91D58B9E4DC85D3AD0993DAC5806496E52060A0CF38A3529999D8A02F4F9F17FA1685196CA836C49661202BB53F5353AAD91013C2C01ECEBA807FE159EF3375C59AF78676FAFEA8ED00712BC080471A0B107C32AAEF957468BABD58CF96114B6E8340EB25B12B83BAA52AAE9E0607E64D22E3D87DA2F4F53135CF7BE5D44302425AC2C3FB3B41AD828304854E4F82C7C5DA112BDE180884BBA78B6967AB57D9345B437127C4A072A0F948F8EDA4BC76F05CBD5D49F7F114B4573B92F9607CAE6209F2774C2D7094A48E4FF4053FEF9F1C0A1FA8E67C06BABA09D5385CBC9347CDBF1CDBBB8BC9EA8DA5CCCFDE9F94B3EBE1E12C73F08010C6663FD614A5573154802D78D22F727CE82EAB699AF1A92C5CAE3CABF1874316
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 1373 897 rc
0 897 m
1373 897 l
1373 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1857.3513 2235.2163 m
3691.2974 2235.2163 l
3691.2974 -1716.1351 l
-1857.3513 -1716.1351 l
h
-1857.3513 2235.2163 m
f
2 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -181 944 cm
252 883 m
252 101.9 l
S
0 J
0 j
0 i
252 92.300003 m
252 101.9 l
248.39999 101.9 m
252 92.300003 l
255.60001 101.9 l
S
1 J
1 j
0.60000002 i
252 883 m
1257.1 883 l
S
0 J
0 j
0 i
1266.7 883 m
1257.1 883 l
1257.1 879.40002 m
1266.7 883 l
1257.1 886.59998 l
S
/Cs1 SC
0 sc
/F1.1[ 26 0 0 -26 0 0]sf
186 703 m
(!")[ 14.924000 0.000000 ] xS
186 472 m
(!#)[ 14.924000 0.000000 ] xS
186 241 m
(!$)[ 14.924000 0.000000 ] xS
/Cs2 SC
1 0.5 0.5 sc
CM
218.09186 269.22787 m
228.63606 258.68372 228.63606 241.58829 218.09186 231.04414 c
207.54771 220.49994 190.45229 220.49994 179.90814 231.04414 c
169.36394 241.58829 169.36394 258.68372 179.90814 269.22787 c
190.45229 279.77206 207.54771 279.77206 218.09186 269.22787 c
f
1 w
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
399.09186 674.77216 m
409.63608 685.31628 409.63608 702.41168 399.09186 712.95587 c
388.5477 723.50006 371.4523 723.50006 360.90814 712.95587 c
350.36392 702.41168 350.36392 685.31628 360.90814 674.77216 c
371.4523 664.22791 388.5477 664.22791 399.09186 674.77216 c
S
/Cs1 SC
0 sc
0 i
365.54401 703 m
(%")[ 14.456000 0.000000 ] xS
/Cs2 SC
1 0.5 0.5 sc
CM
372.09186 269.22787 m
382.63608 258.68372 382.63608 241.58829 372.09186 231.04414 c
361.5477 220.49994 344.4523 220.49994 333.90814 231.04414 c
323.36392 241.58829 323.36392 258.68372 333.90814 269.22787 c
344.4523 279.77206 361.5477 279.77206 372.09186 269.22787 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
553.09186 674.77216 m
563.63605 685.31628 563.63605 702.41168 553.09186 712.95587 c
542.54773 723.50006 525.45227 723.50006 514.90814 712.95587 c
504.36392 702.41168 504.36392 685.31628 514.90814 674.77216 c
525.45227 664.22791 542.54773 664.22791 553.09186 674.77216 c
S
/Cs1 SC
0 sc
0 i
519.54401 703 m
(%#)[ 14.456000 0.000000 ] xS
/Cs2 SC
0.75 1 0.75 sc
CM
629.09186 269.22787 m
639.63605 258.68372 639.63605 241.58829 629.09186 231.04414 c
618.54773 220.49994 601.45227 220.49994 590.90814 231.04414 c
580.36395 241.58829 580.36395 258.68372 590.90814 269.22787 c
601.45227 279.77206 618.54773 279.77206 629.09186 269.22787 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
810.09186 674.77216 m
820.63605 685.31628 820.63605 702.41168 810.09186 712.95587 c
799.54773 723.50006 782.45227 723.50006 771.90814 712.95587 c
761.36395 702.41168 761.36395 685.31628 771.90814 674.77216 c
782.45227 664.22791 799.54773 664.22791 810.09186 674.77216 c
S
/Cs1 SC
0 sc
0 i
776.54401 703 m
(%#)[ 14.456000 0.000000 ] xS
/Cs2 SC
0.75 1 0.75 sc
CM
1011.0919 269.22787 m
1021.636 258.68372 1021.636 241.58829 1011.0919 231.04414 c
1000.5477 220.49994 983.45227 220.49994 972.90814 231.04414 c
962.36395 241.58829 962.36395 258.68372 972.90814 269.22787 c
983.45227 279.77206 1000.5477 279.77206 1011.0919 269.22787 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
1192.0919 674.77216 m
1202.6361 685.31628 1202.6361 702.41168 1192.0919 712.95587 c
1181.5477 723.50006 1164.4523 723.50006 1153.9081 712.95587 c
1143.3639 702.41168 1143.3639 685.31628 1153.9081 674.77216 c
1164.4523 664.22791 1181.5477 664.22791 1192.0919 674.77216 c
S
/Cs1 SC
0 sc
0 i
1158.5439 703 m
(%")[ 14.456000 0.000000 ] xS
/Cs2 SC
1 0.5 0.5 sc
CM
749.09186 500.22787 m
759.63605 489.68372 759.63605 472.58829 749.09186 462.04413 c
738.54773 451.49994 721.45227 451.49994 710.90814 462.04413 c
700.36395 472.58829 700.36395 489.68372 710.90814 500.22787 c
721.45227 510.77206 738.54773 510.77206 749.09186 500.22787 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
930.09186 443.77213 m
940.63605 454.31628 940.63605 471.41171 930.09186 481.95587 c
919.54773 492.50006 902.45227 492.50006 891.90814 481.95587 c
881.36395 471.41171 881.36395 454.31628 891.90814 443.77213 c
902.45227 433.22794 919.54773 433.22794 930.09186 443.77213 c
S
/Cs1 SC
0 sc
0 i
896.54401 472 m
(%#)[ 14.456000 0.000000 ] xS
/Cs2 SC
1 0.5 0.5 sc
CM
307.09186 500.22787 m
317.63608 489.68372 317.63608 472.58829 307.09186 462.04413 c
296.5477 451.49994 279.4523 451.49994 268.90814 462.04413 c
258.36392 472.58829 258.36392 489.68372 268.90814 500.22787 c
279.4523 510.77206 296.5477 510.77206 307.09186 500.22787 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
488.09186 443.77213 m
498.63608 454.31628 498.63608 471.41171 488.09186 481.95587 c
477.5477 492.50006 460.4523 492.50006 449.90814 481.95587 c
439.36392 471.41171 439.36392 454.31628 449.90814 443.77213 c
460.4523 433.22794 477.5477 433.22794 488.09186 443.77213 c
S
/Cs1 SC
0 sc
0 i
454.54401 472 m
(%$)[ 14.456000 0.000000 ] xS
/Cs2 SC
0.75 1 0.75 sc
CM
445.09186 500.22787 m
455.63608 489.68372 455.63608 472.58829 445.09186 462.04413 c
434.5477 451.49994 417.4523 451.49994 406.90814 462.04413 c
396.36392 472.58829 396.36392 489.68372 406.90814 500.22787 c
417.4523 510.77206 434.5477 510.77206 445.09186 500.22787 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
626.09186 443.77213 m
636.63605 454.31628 636.63605 471.41171 626.09186 481.95587 c
615.54773 492.50006 598.45227 492.50006 587.90814 481.95587 c
577.36395 471.41171 577.36395 454.31628 587.90814 443.77213 c
598.45227 433.22794 615.54773 433.22794 626.09186 443.77213 c
S
/Cs1 SC
0 sc
0 i
592.54401 472 m
(%$)[ 14.456000 0.000000 ] xS
/Cs2 SC
1 0.5 0.5 sc
CM
529.09186 731.22784 m
539.63605 720.68372 539.63605 703.58832 529.09186 693.04413 c
518.54773 682.49994 501.4523 682.49994 490.90814 693.04413 c
480.36392 703.58832 480.36392 720.68372 490.90814 731.22784 c
501.4523 741.77209 518.54773 741.77209 529.09186 731.22784 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
710.09186 212.77214 m
720.63605 223.31628 720.63605 240.41171 710.09186 250.95586 c
699.54773 261.50006 682.45227 261.50006 671.90814 250.95586 c
661.36395 240.41171 661.36395 223.31628 671.90814 212.77214 c
682.45227 202.22794 699.54773 202.22794 710.09186 212.77214 c
S
/Cs1 SC
0 sc
0 i
676.54401 241 m
(%$)[ 14.456000 0.000000 ] xS
/Cs2 SC
0.75 1 0.75 sc
CM
839.09186 731.22784 m
849.63605 720.68372 849.63605 703.58832 839.09186 693.04413 c
828.54773 682.49994 811.45227 682.49994 800.90814 693.04413 c
790.36395 703.58832 790.36395 720.68372 800.90814 731.22784 c
811.45227 741.77209 828.54773 741.77209 839.09186 731.22784 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
1020.0919 212.77214 m
1030.6361 223.31628 1030.6361 240.41171 1020.0919 250.95586 c
1009.5477 261.50006 992.45227 261.50006 981.90814 250.95586 c
971.36395 240.41171 971.36395 223.31628 981.90814 212.77214 c
992.45227 202.22794 1009.5477 202.22794 1020.0919 212.77214 c
S
/Cs1 SC
0 sc
0 i
986.54401 241 m
(%$)[ 14.456000 0.000000 ] xS
2 w
0.60000002 i
/Cs2 SC
0 0 0 sc
380 872 m
380 894 l
S
468.94388 872 m
468.94388 894 l
S
533.90289 872 m
533.90289 894 l
S
606.85687 872 m
606.85687 894 l
S
690.80389 872 m
690.80389 894 l
S
790.74084 872 m
790.74084 894 l
S
910.66522 872 m
910.66522 894 l
S
1000.6085 872 m
1000.6085 894 l
S
1172.5 872 m
1172.5 894 l
S
/Cs1 SC
0 sc
0 i
/F1.1[ 20 0 0 -20 0 0]sf
246.94 934 m
(&)s
368.88 934 m
("&)[ 11.120000 0.000000 ] xS
457.88 934 m
(#&)[ 11.120000 0.000000 ] xS
522.88 934 m
(#')[ 11.120000 0.000000 ] xS
595.88 934 m
($\()[ 11.120000 0.000000 ] xS
679.88 934 m
(\)&)[ 11.120000 0.000000 ] xS
779.88 934 m
(\($)[ 11.120000 0.000000 ] xS
899.88 934 m
(*\()[ 11.120000 0.000000 ] xS
989.88 934 m
('#)[ 11.120000 0.000000 ] xS
1161.88 934 m
(+*)[ 11.120000 0.000000 ] xS
1 w
0.60000002 i
/Cs2 SC
0 0 0 sc
252 188.99997 m
1270 189 l
S
252 274 m
1270 274 l
S
253 420.5 m
1271 420.5 l
S
253 505.5 m
1271 505.5 l
S
252 652.5 m
1270 652.5 l
S
252 737.5 m
1270 737.5 l
S
/Cs1 SC
0 sc
0 i
1282.78 890.21997 m
(,-./01)[ 12.220000 10.740000 4.440000 6.300000 5.560000 0.000000 ] xS
1327.22 890.21997 m
(23)[ 11.120000 0.000000 ] xS
1348.34 890.21997 m
(40)[ 5.180000 0.000000 ] xS
216.38 72 m
(!56-783)[ 11.480000 11.120000 6.300000 10.740000 10.740000 11.860000 0.000000 ] xS
/Cs2 SC
0.94901961 0.3764706 0.46666667 sc
CM
1185.0919 866.09186 m
1195.6361 855.54773 1195.6361 838.45227 1185.0919 827.90814 c
1174.5477 817.36395 1157.4523 817.36395 1146.9081 827.90814 c
1136.3639 838.45227 1136.3639 855.54773 1146.9081 866.09186 c
1157.4523 876.63605 1174.5477 876.63605 1185.0919 866.09186 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
1366.0919 77.908134 m
1376.6361 88.452286 1376.6361 105.54771 1366.0919 116.09187 c
1355.5477 126.63606 1338.4523 126.63606 1327.9081 116.09187 c
1317.3639 105.54771 1317.3639 88.452286 1327.9081 77.908134 c
1338.4523 67.363937 1355.5477 67.363937 1366.0919 77.908134 c
S
0 i
0.75 1 0.75 sc
CM
1185.0919 784.09186 m
1195.6361 773.54773 1195.6361 756.45227 1185.0919 745.90814 c
1174.5477 735.36395 1157.4523 735.36395 1146.9081 745.90814 c
1136.3639 756.45227 1136.3639 773.54773 1146.9081 784.09186 c
1157.4523 794.63605 1174.5477 794.63605 1185.0919 784.09186 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -181 944 cm
1366.0919 159.90814 m
1376.6361 170.45229 1376.6361 187.54771 1366.0919 198.09186 c
1355.5477 208.63606 1338.4523 208.63606 1327.9081 198.09186 c
1317.3639 187.54771 1317.3639 170.45229 1327.9081 159.90814 c
1338.4523 149.36394 1355.5477 149.36394 1366.0919 159.90814 c
S
1297 48 m
1553 48 l
1553 228 l
1297 228 l
h
1297 48 m
S
/Cs1 SC
0 sc
0 i
1401.474 186.22 m
(9:;<=>0?@-:/)[ 14.440000 11.120000 4.440000 11.480000 10.740000 10.380000 5.560000 12.220000 10.000000 10.740000 11.120000 0.000000 ] xS
1401.474 104.22 m
(%<=>0?@-:/)[ 11.120000 11.480000 10.740000 10.380000 5.560000 12.220000 10.000000 10.740000 11.120000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
